extends pagewrapper

//- Override config.jade file
append page-config
	- var PageTitle = 'What is Dgraph and why it was created'
	- var PageClass = 'blog-article'
	- var PageIntroClass = 'blog-article'
	- var PageContentClass = 'blog-article'

//- Begin
block partials
	//- include partials/modals/modal
	//- include partials/overlays/overlay

block page-intro
	.container
		.row
			.col-12.col-md-10.col-md-push-1.col-hd-8.push-hd-2
				header.page-intro__header
					.article__meta
						span.article__meta-item.article__date 25.04.2016 
						span.article__meta-item.article__author by Manish Jain
					h1.page-intro__title.page-intro__title--blog What is Dgraph and why it was created
				
				.page-intro__footer
					.article-comment__count
						<svg class="icon"><use xlink:href="#icon-comment" xmlns:xlink="http://www.w3.org/1999/xlink"/></svg>
						a(href="http://localhost:9000/blog-article.html#disqus_thread").js-reveal-comments

					.share
						ul.share__list
							li.share__item
								a(href="#").share__link
									svg.icon.share__icon.share__icon--twitter
										use(xlink:href="#icon-twitter" xmlns:xlink="http://www.w3.org/1999/xlink")
							li.share__item
								a(href="#").share__link
									svg.icon.share__icon.share__icon--facebook
										use(xlink:href="#icon-facebook" xmlns:xlink="http://www.w3.org/1999/xlink")
							li.share__item
								a(href="#").share__link
									svg.icon.share__icon.share__icon--google-plus
										use(xlink:href="#icon-google-plus" xmlns:xlink="http://www.w3.org/1999/xlink")
					// /.share

				// /.page-intro__footer

block page-content
	.container
		.row
			.col-12.col-md-10.col-md-push-1.col-hd-8.push-hd-2

				.article-content

					p I’m very excited to use this first post to talk about Dgraph, what it is and why it was created.

					p Before I explain what’s Dgraph, let’s start with a basic understanding of graphs. A graph is a mathematical structure used to model pairwise relationship between entities. A graph is thus composed of nodes connected by edges. Each node represents an entity (a person, place, thing, etc.), and each edge represents the relationship between two nodes. Some popular graphs that we all know about are the #[a(href="#") Facebook Social Graph], and the Google Knowledge Graph.

					p A graph database is a database that uses graph structures with nodes and edges to represent, store and serve data.

					h4 But who really uses graph databases?

					p More teams and companies than you’d think. Google, Facebook, Twitter, eBay, LinkedIn, Amazon, Dropbox, Pinterest — pick a company you are familiar with. If they’re doing something smart, chances are they’re probably using a graph database. Even very simple web apps have much to gain from graph databases. In the past, I’ve built a graph based REST framework, and using that cut down the code in half.
					
					figure.figure.figure--bleed
						img(src="assets/images/blog/article-image-01.jpg", alt="Hello, World! Image: Mars Rover Curiosity in Buckskin Selfie")
						figcaption.figcapion Hello, World! Image: Mars Rover Curiosity in Buckskin Selfie

					p Before I explain what’s Dgraph, let’s start with a basic understanding of graphs. A graph is a mathematical structure used to model pairwise relationship between entities. A graph is thus composed of nodes connected by edges. Each node represents an entity (a person, place, thing, etc.), and each edge represents the relationship between two nodes. Some popular graphs that we all know about are the #[a(href="#") Facebook Social Graph], and the Google Knowledge Graph.

					pre
						code.elm
							import Html exposing (div, button, text)
							import Html.App exposing (beginnerProgram)
							import Html.Events exposing (onClick)

							type Msg
									= Increment

							main =
									beginnerProgram
											{ model = 0, view = view
											, update = \Increment model -&gt;
											view model = div [] [ div [] [ text (toString model) ], button [ onClick Increment ] [ text "+" ] ]

					p A graph database is a database that uses graph structures with nodes and edges to represent, store and serve data.

					h4 But who really uses graph databases?

					p More teams and companies than you’d think. Google, Facebook, Twitter, eBay, LinkedIn, Amazon, Dropbox, Pinterest — pick a company you are familiar with. If they’re doing something smart, chances are they’re probably using a graph database. Even very simple web apps have much to gain from graph databases. In the past, I’ve built a graph based REST framework, and using that cut down the code in half.

					img(src="assets/images/blog/article-image-02.jpg", alt="Hello, World! Image: Mars Rover Curiosity in Buckskin Selfie")
					figcaption.figcapion Hello, World! Image: Mars Rover Curiosity in Buckskin Selfie

					p Before I explain what’s Dgraph, let’s start with a basic understanding of graphs. A graph is a mathematical structure used to model pairwise relationship between entities. A graph is thus composed of nodes connected by edges. Each node represents an entity (a person, place, thing, etc.), and each edge represents the relationship between two nodes. Some popular graphs that we all know about are the #[a(href="#") Facebook Social Graph], and the Google Knowledge Graph.

					blockquote.blockquote
						p A good example of this would be the ability to recommend events based on the weather to a tourist exploring NYC — that couldn’t easily be done with the existing system.

					p More teams and companies than you’d think. Google, Facebook, Twitter, eBay, LinkedIn, Amazon, Dropbox, Pinterest — pick a company you are familiar with. If they’re doing something smart, chances are they’re probably using a graph database. Even very simple web apps have much to gain from graph databases. In the past, I’ve built a graph based REST framework, and using that cut down the code in half.

					h4 But who really uses graph databases?

					p This motivated me to start a project to standardize the data structures, and eventually serve them all using a single backend. Using the vast expertise of Metaweb team, we chose a data normalization structure that was also used by Knowledge Graph, the RDF Triples. By reconciling all the various entities from the different data feeds, we could start to reuse the data.

					p But, there was a second and more challenging part to the problem. It was to build a system that could serve structured queries with data updating in real time. The system had to run behind Web Search, which meant that if it doesn’t respond within allocated milliseconds, Search would time out and move on. Also, this system had to tackle a major chunk of query load to Web Search, which amounts to thousands of queries per second.
					
					figure.figure.figure-inline.figure-inline--right
						img(src="assets/images/blog/article-image-01.jpg", alt="Hello, World! Image: Mars Rover Curiosity in Buckskin Selfie")
						figcaption.figcapion Hello, World! Image: Mars Rover Curiosity in Buckskin Selfie

					p But, there was a second and more challenging part to the problem. It was to build a system that could serve structured queries with data updating in real time. The system had to run behind Web Search, which meant that if it doesn’t respond within allocated milliseconds, Search would time out and move on. Also, this system had to tackle a major chunk of query load to Web Search, which amounts to thousands of queries per second.

					p This motivated me to start a project to standardize the data structures, and eventually serve them all using a single backend. Using the vast expertise of Metaweb team, we chose a data normalization structure that was also used by Knowledge Graph, the RDF Triples. By reconciling all the various entities from the different data feeds, we could start to reuse the data.

					p But, there was a second and more challenging part to the problem. It was to build a system that could serve structured queries with data updating in real time. The system had to run behind Web Search, which meant that if it doesn’t respond within allocated milliseconds, Search would time out and move on. Also, this system had to tackle a major chunk of query load to Web Search, which amounts to thousands of queries per second.

					figure.figure.figure-inline.figure-inline--left
						img(src="assets/images/blog/article-image-01.jpg", alt="Hello, World! Image: Mars Rover Curiosity in Buckskin Selfie")
						figcaption.figcapion Hello, World! Image: Mars Rover Curiosity in Buckskin Selfie

					p But, there was a second and more challenging part to the problem. It was to build a system that could serve structured queries with data updating in real time. The system had to run behind Web Search, which meant that if it doesn’t respond within allocated milliseconds, Search would time out and move on. Also, this system had to tackle a major chunk of query load to Web Search, which amounts to thousands of queries per second.

					p We basically had to build a low latency, high throughput system to serve graph queries.

					p It was certainly an exciting project and held much promise. But, the harsh realities of the business environment and the attendant politics resulted in the cancellation of the project. Shortly thereafter I left Google in 2013 and didn’t give much thought to the project. Fast forward two years, I was hanging out on the Go language’s Slack channel and Stack Overflow. I saw quite a few people complaining about a popular graph database’s performance and stability.

					p That’s when I realized that graph databases were starting to be used more frequently than it would appear from the surface. But a bit more digging around revealed a deeper problem:
					
					ol
						li Existing native graph databases weren’t designed to be performant or distributed.
						li The ones that sharded the data and distributed it across a cluster
						li They were largely serving as a graph layer over another database. 

						li This meant having many network calls should the intermediate number of results 
						li  be large, which leads to performance degradation.
						li For example, say you wanted to find.
						li Assuming you have this data (hey Facebook!) and keeping things simple

					p First you find all the people living in SF, and then secondly, intersect that list with all the people who eat Sushi.

					p Do that for every query, and it would spike the #[a(href="#") 95%-ile latency numbers] up dramatically, higher latency being worse.

					p DGraph, on the other hand, is a native graph database in the sense that the data is handled directly by DGraph, and not given off to another database layer.

					p This allows us to shard and relocate the data better, to minimize the number of network calls required per query. In fact, the above query would run in 2 network calls, irrespective of the cluster size.

					table
						thead
							tr
								th Table Header
								th Table Header
						tbody
							tr
								td Table data text
								td Table data text
							tr
								td Table data text
								td Table data text
							tr
								td Table data text
								td Table data text
							tr
								td Table data text
								td Table data text

					p Github repository, then find us hanging out at discuss.dgraph.io and come talk to us. Written by Manish R Jain. Thanks to Prashanth Koppula and the team for proof reading. Originally published at #[a(href="#") blog.dgraph.io].
					
				// /.article-content

				div.article-category
					h5.article-category__title Filed Under:
					ul.blog-tag__list
							li.blog-tag__item
								a(href="blog-category.html").blog-tag Graph
							li.blog-tag__item
								a(href="blog-category.html").blog-tag Big Data
							li.blog-tag__item
								a(href="blog-category.html").blog-tag Database

				// /.article-category
				
				#article-comment.article-comment
					a(href="http://localhost:9000/blog-article.html#disqus_thread").button.article-comment__button.js-reveal-comments
					
					#disqus_thread
				
				// /.article-comment

	footer.article-footer
		.container
			.row
				.col-12.col-md-10.col-md-push-1.col-hd-8.push-hd-2
					.article-author
						figure.article-author__figure
							img(src="assets/images/about/team-manish.jpg", alt="Manish Rai Jain").article-author__image

						.article-author__bio
							h4.article-author__name Manish Rai Jain
								span.article-author__title Author
							nav.social__nav.article-author__social
								ul.social__list.social__list--inline
									li.social__item.social__item--inline
										a(href="#").social__link
											svg.icon.social__icon.social__icon--linkedin
												use(xlink:href="#icon-linkedin" xmlns:xlink="http://www.w3.org/1999/xlink")
									li.social__item.social__item--inline
										a(href="#").social__link
											svg.icon.social__icon.social__icon--twitter
												use(xlink:href="#icon-twitter" xmlns:xlink="http://www.w3.org/1999/xlink")
							p Manish is the Chief decision maker at DGraph. He got thrust into distributed systems right out of college, working on real time web indexing system at Google. He then lead various projects to consolidate and serve knowledge graph right behind web search.
					
					// /.article-author
					
					.similar-article
						h4.similar-article__title Smilar articles:
						ul.similar-article__list
							li.similar-article__item
								a(href="#").similar-article__link Official Release: 3 Essentials of Dgraph 3.0, from Scale to Productivity &amp; Deployment
							li.similar-article__item
								a(href="#").similar-article__link Answering All Your Questions: Dgraph Knowledge Base
							li.similar-article__item
								a(href="#").similar-article__link Stop Fraud Rings in Their Tracks with Dgraph
					
					// /.similar-article

	// /.article-footer

block additional-scripts
	// Highlight JS plugin for article page
	script(type="text/javascript", src="assets/js/unminified/vendor/highlight-js/highlight.pack.js")
	script(type='text/javascript').
		hljs.initHighlightingOnLoad();
	
	// Disqus comment count
	// Info: https://help.disqus.com/customer/portal/articles/565624
	script(id="dsq-count-scr" src="//skgamingtest.disqus.com/count.js" async)